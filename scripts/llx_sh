#!/usr/bin/perl -wl


# Copyright (C) 2008, 2015 Bibliotheca Alexandrina
# <http://www.bibalex.org/>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


#
# Youssef Eldakar <youssef.eldakar@bibalex.org>
#

#
# I execute 'command' for each line in each 'list', and I try to
# maintain count 'children' of 'command' running in parallel.  If no
# 'list' is present, I read standard input instead.  Before executing a
# 'command', I expand any "index argument" into the field it references
# in the current line in 'list'.  An index argument is any word in the
# white-space-delimited 'command' that matches the pattern /\$[0-9]+/.
# The numeric portion of an index argument is a one-based index into the
# current white-space-delimited line in 'list'.  If an index argument is
# out-of-range, I delete it.  I execute 'command' on my own without
# employing a shell.  Presently, 'command' cannot contain a literal word
# that matches the pattern of an index argument.  Specify '-d delay' to
# apply a 'delay'-second pause after each execution of 'command'; and
# '-v' (verbose) to print each command before executing it.  Specify
# either '-E code' to rerun 'command' if its exit code does not equal
# 'code' or '-e code' to rerun 'command' if its exit code equals 'code';
# and '-t timeout' to send 'command' the termination signal and rerun it
# following a 'timeout'-second running duration (I interpret a 'timeout'
# value of 0 as infinity; I default to 0).  Specify '-r reruns' to limit
# the total number of rerun attempts due to an exit code or timeout
# condition to 'reruns' (I interpret a 'reruns' value of 0 as infinity;
# I default to 3).
#

use strict;

use File::Basename;
use Getopt::Std;

use POSIX ":sys_wait_h";

$, = " ";
$SIG{CHLD} = \&REAP;

my %opts;

getopts ( "c:d:E:e:n:r:t:v", \%opts )
  && defined $opts{c} && ! ( defined $opts{E} && defined $opts{e} )
  && defined $opts{n} || help () && exit;

unless ( defined $opts{r} )
{
  $opts{r} = 3;
}

unless ( defined $opts{t} )
{
  $opts{t} = 0;
}

my %children;
my $child_pid;

$_ = $opts{c};

my @command = split;
my @command_expansion;

my @reruns;
my $rerun_count;

my $input_exhausted;

my $alarm_on;

while ( 1 )
{

  if ( ( $rerun_count, @command_expansion ) = more () )
  {
    if ( $opts{d} )
    {
      sleep $opts{d};
    }

    if ( ( $child_pid = fork ) == 0 )
    {
      delete $SIG{CHLD};

      while ( 1 )
      {

        if ( ( $child_pid = fork ) == 0 )
        {
          # Execute

          if ( $opts{v} )
          {
            print scalar localtime time, @command_expansion, "#", $rerun_count;
          }

          exec join " ", @command_expansion;
        }
        else
        {
          # Oversee

          eval
          {
            if ( $opts{t} ) # = 0 for infinite timeout
            {
              $SIG{ALRM} = sub
              {

              die "TO\n";

              };

              alarm $opts{t};
            }

            waitpid $child_pid, 0;

            if ( $opts{t} ) # = 0 for infinite timeout
            {
              alarm 0;
            }

            if ( defined $opts{E} && $? != $opts{E} ||
                 defined $opts{e} && $? == $opts{e} )
            {
              die "EC\n";
            }
          };

              if ( $@ )
              {
                    if ( $@ eq "TO\n" )
                    {
                      kill "TERM", $child_pid;
                      waitpid $child_pid, 0;
                    }
                 elsif ( $@ eq "EC\n" )
                    {

                    }

                    if ( $opts{v} )
                    {
                      print scalar localtime time, @command_expansion, ":", $?;
                    }

                    if ( $opts{r} == 0 )
                    {
                      $rerun_count++;

                      next;
                    }
                 elsif ( $opts{r} != 0 && $rerun_count < $opts{r} )
                    {
                      $rerun_count++;

                      next;
                    }
                 else
                    {
                      last;
                    }
              }
           else
              {
                    if ( $opts{v} )
                    {
                      print scalar localtime time, @command_expansion, ":", $?;
                    }

                    last;
              }
        }

      }

      last;
    }
    else
    {
      $children{$child_pid} = [ time, $rerun_count, [ @command_expansion ] ];

      if ( keys %children >= $opts{n} )
      {
        delete $SIG{CHLD};

        HOLD ( 1 );

        $SIG{CHLD} = \&REAP;
      }
    }
  }
  else
  {
      if ( keys %children )
      {
        delete $SIG{CHLD};

        HOLD ( 0 );
      }

      last;
  }

}

sub help
{
  print basename $0 . " " .
    "-c command [-d delay] [-E|-e code] -n children [-r reruns] [-t timeout] [-v]";
}

sub more
{

    destdin ();

}

sub dequeue
{
  if ( @reruns )
  {
    return @{ shift @reruns };
  }
  else
  {
    return ();
  }
}

sub destdin
{
  if ( $_ = <> )
  {
    # Index argument expansion

    my @line = split;
    my @command_expansion;

    foreach ( @command )
    {
          if ( /\$([1-9]\d*)/ )
          {
            if ( $line[$1 - 1] ne "" )
            {
              my $tok = $_;
              $tok =~ s/\$([1-9]\d*)/$line[$1 - 1]/;

              push  @command_expansion, $tok;
            }
          }
       else
          {
              push  @command_expansion, $_;
          }
    }

    return ( 1, @command_expansion );
  }
  else
  {
    return ();
  }
}

sub HOLD
{
  if ( $_[0] == 0 )
  {
    delete $children{$child_pid}

           while ( ( $child_pid = waitpid -1, 0       ) > 0 );
  }
  else
  {
    foreach ( 1 .. $_[0] )
    {

    delete $children{$child_pid}

              if ( ( $child_pid = waitpid -1, 0       ) > 0 );

    }
  }
}

sub REAP
{
    delete $children{$child_pid}

           while ( ( $child_pid = waitpid -1, WNOHANG ) > 0 );

    $SIG{CHLD} = \&REAP;
}
