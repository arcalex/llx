#!/usr/bin/perl -wl


# Copyright (C) 2008, 2015, 2021 Bibliotheca Alexandrina <http://www.bibalex.org/>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


#
# Youssef Eldakar <youssef.eldakar@bibalex.org>
#

=head1 NAME

llx - parallel execution

=head1 SYNOPSIS

B<llx> B<-c> I<command> B<-n> I<children> [I<file>S< >...]

=head1 DESCRIPTION

B<llx> executes I<command> for each line in each I<file> and maintains
up to count I<children> of I<command> running in parallel.  If no
I<file> is given, standard input is used instead.

Before executing I<command>, any "index variable" is expanded into the
field it references in the current whitespace-delimited line in I<file>.
An index variable is any substring in I<command> that consists of a
dollar sign immediately followed by a non-zero integer, where the
integer is a one-based index into the current line in I<file>.  An index
variable that is out of range is dropped.  The pattern of an index
variable cannot be escaped at the moment.

=head1 OPTIONS

=over 8

=item B<-d> I<delay>

Apply a I<delay>-second pause after each execution of I<command>.

=item B<-E> I<code>

Rerun I<command> if the exit code does not equal I<code>.

=item B<-e> I<code>

Rerun I<command> if the exit code equals I<code>.

=item B<-t> I<timeout>

Send I<command>'process the termination signal and rerun it following a
I<timeout>-second running duration (0 is for no timeout and is the
default).

=item B<-s>

Allow execution via the system's command shell if there are shell
metacharacters in I<command>.

=item B<-r> I<reruns>

Limit the total number of rerun attempts due to an exit code condition
(see B<-E> and B<-e>) or a timeout condition (see B<-t>) to I<reruns>
times (0 is for indefinite reruns, and 3 is the default).

=item B<-t> I<timeout>

Send the child process the termination signal and rerun it following a
I<timeout>-second running duration (0 is for no timeout and is the
default).

=item B<-v>

Turn on verbose mode.  In verbose mode, print each command before
executing it followed by a space, hashmark, space, then the rerun count
(i.e., 0 for the initial run), and print the command again after the run
followed by a space, a colon, a space, then the exit code.  Each line of
verbose output has a leading date and time and is written to standard
error.

=back

=head1 AUTHORS

B<llx> is copyright (C) 2008, 2015, 2021 Bibliotheca Alexandrina,
written by Youssef Eldakar <youssef.eldakar@bibalex.org>.

=cut

use strict;

use File::Basename;
use Getopt::Std;

use POSIX ":sys_wait_h";

$, = " ";
$SIG{CHLD} = \&REAP;

my %opts;

getopts ( "c:d:E:e:n:r:st:v", \%opts )
  && defined $opts{c} && ! ( defined $opts{E} && defined $opts{e} )
  && defined $opts{n} || help () && exit;

unless ( defined $opts{r} )
{
  $opts{r} = 3;
}

unless ( defined $opts{t} )
{
  $opts{t} = 0;
}

my %children;
my $child_pid;

$_ = $opts{c};

my @command = split;
my @command_expansion;

my @reruns;
my $rerun_count;

my $input_exhausted;

my $alarm_on;

while ( 1 )
{

  if ( ( $rerun_count, @command_expansion ) = more () )
  {
    if ( $opts{d} )
    {
      sleep $opts{d};
    }

    if ( ( $child_pid = fork ) == 0 )
    {
      delete $SIG{CHLD};

      while ( 1 )
      {

        if ( ( $child_pid = fork ) == 0 )
        {
          # Execute

          if ( $opts{v} )
          {
            print scalar localtime time, @command_expansion, "#", $rerun_count;
          }

          unless ( defined $opts{s} )
          {
            # Force execution using execvp(3).
            exec { $command_expansion[0] } @command_expansion;
          }
          else
          {
            # Use shell if there are shell metacharacters.
            exec join " ", @command_expansion;
          }
        }
        else
        {
          # Oversee

          eval
          {
            if ( $opts{t} ) # = 0 for infinite timeout
            {
              $SIG{ALRM} = sub
              {

              die "TO\n";

              };

              alarm $opts{t};
            }

            waitpid $child_pid, 0;

            if ( $opts{t} ) # = 0 for infinite timeout
            {
              alarm 0;
            }

            if ( defined $opts{E} && $? != $opts{E} ||
                 defined $opts{e} && $? == $opts{e} )
            {
              die "EC\n";
            }
          };

              if ( $@ )
              {
                    if ( $@ eq "TO\n" )
                    {
                      kill "TERM", $child_pid;
                      waitpid $child_pid, 0;
                    }
                 elsif ( $@ eq "EC\n" )
                    {

                    }

                    if ( $opts{v} )
                    {
                      print scalar localtime time, @command_expansion, ":", $?;
                    }

                    if ( $opts{r} == 0 )
                    {
                      $rerun_count++;

                      next;
                    }
                 elsif ( $opts{r} != 0 && $rerun_count < $opts{r} )
                    {
                      $rerun_count++;

                      next;
                    }
                 else
                    {
                      last;
                    }
              }
           else
              {
                    if ( $opts{v} )
                    {
                      print scalar localtime time, @command_expansion, ":", $?;
                    }

                    last;
              }
        }

      }

      last;
    }
    else
    {
      $children{$child_pid} = [ time, $rerun_count, [ @command_expansion ] ];

      if ( keys %children >= $opts{n} )
      {
        delete $SIG{CHLD};

        HOLD ( 1 );

        $SIG{CHLD} = \&REAP;
      }
    }
  }
  else
  {
      if ( keys %children )
      {
        delete $SIG{CHLD};

        HOLD ( 0 );
      }

      last;
  }

}

sub help
{
  print basename $0 . " " .
    "-c command [-d delay] [-E|-e code] -n children [-r reruns] [-s] [-t timeout] [-v]";
}

sub more
{

    destdin ();

}

sub dequeue
{
  if ( @reruns )
  {
    return @{ shift @reruns };
  }
  else
  {
    return ();
  }
}

sub destdin
{
  if ( $_ = <> )
  {
    # Index argument expansion

    my @line = split;
    my @command_expansion;

    foreach ( @command )
    {
          if ( /\$([1-9]\d*)/ )
          {
            if ( $line[$1 - 1] ne "" )
            {
              my $tok = $_;
              $tok =~ s/\$([1-9]\d*)/$line[$1 - 1]/;

              push  @command_expansion, $tok;
            }
          }
       else
          {
              push  @command_expansion, $_;
          }
    }

    return ( 1, @command_expansion );
  }
  else
  {
    return ();
  }
}

sub HOLD
{
  if ( $_[0] == 0 )
  {
    delete $children{$child_pid}

           while ( ( $child_pid = waitpid -1, 0       ) > 0 );
  }
  else
  {
    foreach ( 1 .. $_[0] )
    {

    delete $children{$child_pid}

              if ( ( $child_pid = waitpid -1, 0       ) > 0 );

    }
  }
}

sub REAP
{
    delete $children{$child_pid}

           while ( ( $child_pid = waitpid -1, WNOHANG ) > 0 );

    $SIG{CHLD} = \&REAP;
}
